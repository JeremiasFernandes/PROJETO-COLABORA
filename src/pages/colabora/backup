import { useState, useEffect} from 'react';
import { Link } from 'react-router-dom';
import Graphvis from '../../components/Graphvis/Graphvis'
import NetworkButton from '../../components/NetworkButton/NetworkButton';
import './GraphvisPage.css'
import DataJson from '../../assets/DynamicNetwork.json'
// import BigDataJson from '../../assets/DynamicNetworkBIg.json'
import api from '../../services/api'

export default function GraphvisPage() {

    const [id, setId] = useState(1);

    const graphs = { ...DataJson };

    // const graphs = {
    //     graphTimeline: [
    //         {
    //             id: 1,
    //             timestamp: '132231213',
    //             nodes: [
    //                 { id: 1, label: "Node 1", title: "node 1 tootip text" },
    //                 { id: 2, label: "Node 2", title: "node 2 tootip text" }
    //             ],
    //             nodesNumber: 2,
    //             edges: [
    //                 { from: 1, to: 2 }
    //             ],
    //             edgesNumber: 2
    //         },

    //         {
    //             id: 2,
    //             timestamp: '132231214',
    //             nodes: [
    //                 { id: 1, label: "Node 1", title: "node 1 tootip text" },
    //                 { id: 2, label: "Node 2", title: "node 2 tootip text" },
    //                 { id: 3, label: "Node 3", title: "node 3 tootip text" },
    //                 { id: 4, label: "Node 4", title: "node 4 tootip text" },
    //             ],
    //             nodesNumber: 4,
    //             edges: [
    //                 { from: 1, to: 2 },
    //                 { from: 1, to: 3 },
    //                 { from: 2, to: 4 }
    //             ],
    //             edgesNumber: 3
    //         },

    //         {
    //             id: 3,
    //             timestamp: '132231215',
    //             nodes: [
    //                 { id: 1, label: "Node 1", title: "node 1 tootip text" },
    //                 { id: 2, label: "Node 2", title: "node 2 tootip text" },
    //                 { id: 3, label: "Node 3", title: "node 3 tootip text" },
    //                 { id: 4, label: "Node 4", title: "node 4 tootip text" },
    //                 { id: 5, label: "Node 5", title: "node 5 tootip text" },

    //             ],
    //             nodesNumber: 5,
    //             edges: [
    //                 { from: 1, to: 2 },
    //                 { from: 1, to: 3 },
    //                 { from: 2, to: 4 },
    //                 { from: 2, to: 5 }
    //             ],
    //             edgesNumber: 4
    //         },

    //     ],
    // };

    const [filteredGraph, setFilteredGraph] = useState(graphs.graphTimeline);

    const filter = (search) => {

        let filteredList = '';

        if (search === "") {
            filteredList = graphs.graphTimeline;
        } else {
            filteredList = graphs.graphTimeline.filter(
                element => element.id.toString().toLowerCase().includes(search.toLowerCase())
            );
        }

        setFilteredGraph(filteredList);

    }

    // useEffect(() => {
    //     console.log('Pagina');
    //     // GET request using fetch inside useEffect React hook
    //     api.get('http://127.0.0.1:8000/networkJson/')
    //         .then(response => {
    //             console.log('Resposta: ',response);
    //             // setFilteredGraph(response.data,console.log("FIltrado:",filteredGraph));
    //             // response.json()
    //         }).catch((err) => {
    //             console.error("ops! ocorreu um erro" + err);
    //         });
    
    // // empty dependency array means this effect will only run once (like componentDidMount in classes)
    // }, []);

    return (
        <>
            <div className='main-page'>
                <input type="text" className='page-filter' placeholder='Buscar...' onChange={event => { filter(event.target.value) }}></input>
                <div className='page-container'>
                    <div className='page-buttons-container'>
                        {
                            filteredGraph.map((graph,index) =>
                                <NetworkButton
                                    id={graph.id}
                                    key={index}
                                    nodes={graph.nodesNumber}
                                    edges={graph.edgesNumber} timestamp={graph.timestamp}
                                    onClick={() => { setId(graph.id); }}
                                    className={id === graph.id ? 'network-button-selected' : 'network-button-container'}
                                />
                            )
                        }

                    </div>
                    <div className='page-graph-container'>
                        <span className='page-graph-id-label'>
                            <h2 className='page-graph-id-label-text'>#{id}</h2>
                        </span>
                        {graphs.graphTimeline.map((graph) =>
                            id === graph.id ?
                                <Graphvis key={graph.id} nodes={graph.nodes} edges={graph.edges}></Graphvis>
                                : <></>
                        )}
                    </div>
                </div>
            </div>

        </>
    );
}